/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PoultryContentService } from "../poultryContent.service";
import { PoultryContentCreateInput } from "./PoultryContentCreateInput";
import { PoultryContent } from "./PoultryContent";
import { PoultryContentFindManyArgs } from "./PoultryContentFindManyArgs";
import { PoultryContentWhereUniqueInput } from "./PoultryContentWhereUniqueInput";
import { PoultryContentUpdateInput } from "./PoultryContentUpdateInput";

export class PoultryContentControllerBase {
  constructor(protected readonly service: PoultryContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PoultryContent })
  async createPoultryContent(
    @common.Body() data: PoultryContentCreateInput
  ): Promise<PoultryContent> {
    return await this.service.createPoultryContent({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PoultryContent] })
  @ApiNestedQuery(PoultryContentFindManyArgs)
  async poultryContents(
    @common.Req() request: Request
  ): Promise<PoultryContent[]> {
    const args = plainToClass(PoultryContentFindManyArgs, request.query);
    return this.service.poultryContents({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PoultryContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async poultryContent(
    @common.Param() params: PoultryContentWhereUniqueInput
  ): Promise<PoultryContent | null> {
    const result = await this.service.poultryContent({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PoultryContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePoultryContent(
    @common.Param() params: PoultryContentWhereUniqueInput,
    @common.Body() data: PoultryContentUpdateInput
  ): Promise<PoultryContent | null> {
    try {
      return await this.service.updatePoultryContent({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          publishedDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PoultryContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePoultryContent(
    @common.Param() params: PoultryContentWhereUniqueInput
  ): Promise<PoultryContent | null> {
    try {
      return await this.service.deletePoultryContent({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          publishedDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
