/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PoultryContent } from "./PoultryContent";
import { PoultryContentCountArgs } from "./PoultryContentCountArgs";
import { PoultryContentFindManyArgs } from "./PoultryContentFindManyArgs";
import { PoultryContentFindUniqueArgs } from "./PoultryContentFindUniqueArgs";
import { CreatePoultryContentArgs } from "./CreatePoultryContentArgs";
import { UpdatePoultryContentArgs } from "./UpdatePoultryContentArgs";
import { DeletePoultryContentArgs } from "./DeletePoultryContentArgs";
import { PoultryContentService } from "../poultryContent.service";
@graphql.Resolver(() => PoultryContent)
export class PoultryContentResolverBase {
  constructor(protected readonly service: PoultryContentService) {}

  async _poultryContentsMeta(
    @graphql.Args() args: PoultryContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PoultryContent])
  async poultryContents(
    @graphql.Args() args: PoultryContentFindManyArgs
  ): Promise<PoultryContent[]> {
    return this.service.poultryContents(args);
  }

  @graphql.Query(() => PoultryContent, { nullable: true })
  async poultryContent(
    @graphql.Args() args: PoultryContentFindUniqueArgs
  ): Promise<PoultryContent | null> {
    const result = await this.service.poultryContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PoultryContent)
  async createPoultryContent(
    @graphql.Args() args: CreatePoultryContentArgs
  ): Promise<PoultryContent> {
    return await this.service.createPoultryContent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PoultryContent)
  async updatePoultryContent(
    @graphql.Args() args: UpdatePoultryContentArgs
  ): Promise<PoultryContent | null> {
    try {
      return await this.service.updatePoultryContent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PoultryContent)
  async deletePoultryContent(
    @graphql.Args() args: DeletePoultryContentArgs
  ): Promise<PoultryContent | null> {
    try {
      return await this.service.deletePoultryContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
