/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PoultryContent as PrismaPoultryContent } from "@prisma/client";

export class PoultryContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PoultryContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.poultryContent.count(args);
  }

  async poultryContents<T extends Prisma.PoultryContentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PoultryContentFindManyArgs>
  ): Promise<PrismaPoultryContent[]> {
    return this.prisma.poultryContent.findMany<Prisma.PoultryContentFindManyArgs>(
      args
    );
  }
  async poultryContent<T extends Prisma.PoultryContentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PoultryContentFindUniqueArgs>
  ): Promise<PrismaPoultryContent | null> {
    return this.prisma.poultryContent.findUnique(args);
  }
  async createPoultryContent<T extends Prisma.PoultryContentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PoultryContentCreateArgs>
  ): Promise<PrismaPoultryContent> {
    return this.prisma.poultryContent.create<T>(args);
  }
  async updatePoultryContent<T extends Prisma.PoultryContentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PoultryContentUpdateArgs>
  ): Promise<PrismaPoultryContent> {
    return this.prisma.poultryContent.update<T>(args);
  }
  async deletePoultryContent<T extends Prisma.PoultryContentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PoultryContentDeleteArgs>
  ): Promise<PrismaPoultryContent> {
    return this.prisma.poultryContent.delete(args);
  }
}
