/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FarmProduct as PrismaFarmProduct,
  Vendor as PrismaVendor,
} from "@prisma/client";

export class FarmProductServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FarmProductCountArgs, "select">
  ): Promise<number> {
    return this.prisma.farmProduct.count(args);
  }

  async farmProducts<T extends Prisma.FarmProductFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmProductFindManyArgs>
  ): Promise<PrismaFarmProduct[]> {
    return this.prisma.farmProduct.findMany<Prisma.FarmProductFindManyArgs>(
      args
    );
  }
  async farmProduct<T extends Prisma.FarmProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmProductFindUniqueArgs>
  ): Promise<PrismaFarmProduct | null> {
    return this.prisma.farmProduct.findUnique(args);
  }
  async createFarmProduct<T extends Prisma.FarmProductCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmProductCreateArgs>
  ): Promise<PrismaFarmProduct> {
    return this.prisma.farmProduct.create<T>(args);
  }
  async updateFarmProduct<T extends Prisma.FarmProductUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmProductUpdateArgs>
  ): Promise<PrismaFarmProduct> {
    return this.prisma.farmProduct.update<T>(args);
  }
  async deleteFarmProduct<T extends Prisma.FarmProductDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmProductDeleteArgs>
  ): Promise<PrismaFarmProduct> {
    return this.prisma.farmProduct.delete(args);
  }

  async getVendor(parentId: string): Promise<PrismaVendor | null> {
    return this.prisma.farmProduct
      .findUnique({
        where: { id: parentId },
      })
      .vendor();
  }
}
