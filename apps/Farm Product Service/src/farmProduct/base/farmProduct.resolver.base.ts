/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FarmProduct } from "./FarmProduct";
import { FarmProductCountArgs } from "./FarmProductCountArgs";
import { FarmProductFindManyArgs } from "./FarmProductFindManyArgs";
import { FarmProductFindUniqueArgs } from "./FarmProductFindUniqueArgs";
import { CreateFarmProductArgs } from "./CreateFarmProductArgs";
import { UpdateFarmProductArgs } from "./UpdateFarmProductArgs";
import { DeleteFarmProductArgs } from "./DeleteFarmProductArgs";
import { Vendor } from "../../vendor/base/Vendor";
import { FarmProductService } from "../farmProduct.service";
@graphql.Resolver(() => FarmProduct)
export class FarmProductResolverBase {
  constructor(protected readonly service: FarmProductService) {}

  async _farmProductsMeta(
    @graphql.Args() args: FarmProductCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FarmProduct])
  async farmProducts(
    @graphql.Args() args: FarmProductFindManyArgs
  ): Promise<FarmProduct[]> {
    return this.service.farmProducts(args);
  }

  @graphql.Query(() => FarmProduct, { nullable: true })
  async farmProduct(
    @graphql.Args() args: FarmProductFindUniqueArgs
  ): Promise<FarmProduct | null> {
    const result = await this.service.farmProduct(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FarmProduct)
  async createFarmProduct(
    @graphql.Args() args: CreateFarmProductArgs
  ): Promise<FarmProduct> {
    return await this.service.createFarmProduct({
      ...args,
      data: {
        ...args.data,

        vendor: args.data.vendor
          ? {
              connect: args.data.vendor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FarmProduct)
  async updateFarmProduct(
    @graphql.Args() args: UpdateFarmProductArgs
  ): Promise<FarmProduct | null> {
    try {
      return await this.service.updateFarmProduct({
        ...args,
        data: {
          ...args.data,

          vendor: args.data.vendor
            ? {
                connect: args.data.vendor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FarmProduct)
  async deleteFarmProduct(
    @graphql.Args() args: DeleteFarmProductArgs
  ): Promise<FarmProduct | null> {
    try {
      return await this.service.deleteFarmProduct(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Vendor, {
    nullable: true,
    name: "vendor",
  })
  async getVendor(
    @graphql.Parent() parent: FarmProduct
  ): Promise<Vendor | null> {
    const result = await this.service.getVendor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
