/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FarmProductService } from "../farmProduct.service";
import { FarmProductCreateInput } from "./FarmProductCreateInput";
import { FarmProduct } from "./FarmProduct";
import { FarmProductFindManyArgs } from "./FarmProductFindManyArgs";
import { FarmProductWhereUniqueInput } from "./FarmProductWhereUniqueInput";
import { FarmProductUpdateInput } from "./FarmProductUpdateInput";

export class FarmProductControllerBase {
  constructor(protected readonly service: FarmProductService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FarmProduct })
  async createFarmProduct(
    @common.Body() data: FarmProductCreateInput
  ): Promise<FarmProduct> {
    return await this.service.createFarmProduct({
      data: {
        ...data,

        vendor: data.vendor
          ? {
              connect: data.vendor,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        price: true,
        productName: true,
        quantity: true,
        updatedAt: true,

        vendor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FarmProduct] })
  @ApiNestedQuery(FarmProductFindManyArgs)
  async farmProducts(@common.Req() request: Request): Promise<FarmProduct[]> {
    const args = plainToClass(FarmProductFindManyArgs, request.query);
    return this.service.farmProducts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        price: true,
        productName: true,
        quantity: true,
        updatedAt: true,

        vendor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FarmProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async farmProduct(
    @common.Param() params: FarmProductWhereUniqueInput
  ): Promise<FarmProduct | null> {
    const result = await this.service.farmProduct({
      where: params,
      select: {
        createdAt: true,
        id: true,
        price: true,
        productName: true,
        quantity: true,
        updatedAt: true,

        vendor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FarmProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFarmProduct(
    @common.Param() params: FarmProductWhereUniqueInput,
    @common.Body() data: FarmProductUpdateInput
  ): Promise<FarmProduct | null> {
    try {
      return await this.service.updateFarmProduct({
        where: params,
        data: {
          ...data,

          vendor: data.vendor
            ? {
                connect: data.vendor,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          price: true,
          productName: true,
          quantity: true,
          updatedAt: true,

          vendor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FarmProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFarmProduct(
    @common.Param() params: FarmProductWhereUniqueInput
  ): Promise<FarmProduct | null> {
    try {
      return await this.service.deleteFarmProduct({
        where: params,
        select: {
          createdAt: true,
          id: true,
          price: true,
          productName: true,
          quantity: true,
          updatedAt: true,

          vendor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
